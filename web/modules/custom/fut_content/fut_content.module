<?php

/**
 * @file
 * Contains fut_content.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function fut_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fut_content module.
    case 'help.page.fut_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Futurium Content module contains content related configurations.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_node().
 */
function fut_content_preprocess_node(array &$variables) {

  // Set custom logic for date.
  $created = $variables['node']->created->value;
  $changed = $variables['node']->changed->value;

  $output = [];
  $output[] = [
    '#theme' => 'markup',
    '#markup' => \Drupal::service('date.formatter')->format($created, 'custom', 'j F Y'),
  ];

  if (!empty($changed) && ($changed <> $created)) {
    $delay = \Drupal::service('date.formatter')->formatInterval(time() - $changed, 1);
    $delay = t('@space- updated @delay ago', [
      '@delay' => $delay,
      '@space' => ' ',
    ]);
    if ($changed > strtotime('-1 hour')) {
      $delay = t('@space updated last hour', [
        '@space' => ' ',
      ]);
    }
    $label = t('updated');
    $delay_item = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => "text-muted last-$label",
      ],
      '#value' => $delay,
    ];
    $output[] = $delay_item;
    $variables['date'] = render($output);
  }

}

/**
 * Implements hook_theme().
 */
function fut_content_theme($existing, $type, $theme, $path) {
  return [
    'event_map' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for event_map_wrapper templates.
 *
 * Template: event-map.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display.
 */
function template_preprocess_event_map(array &$variables) {
  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
