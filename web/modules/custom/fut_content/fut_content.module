<?php

/**
 * @file
 * Contains fut_content.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\group\Entity\GroupContent;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function fut_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fut_content module.
    case 'help.page.fut_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Futurium Content module contains content related configurations.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_node().
 */
function fut_content_preprocess_node(array &$variables) {

  // Set custom logic for date.
  $created = $variables['node']->created->value;
  $changed = $variables['node']->changed->value;

  $output = [];
  $output[] = [
    '#type' => 'markup',
    '#markup' => \Drupal::service('date.formatter')->format($created, 'custom', 'j F Y'),
  ];

  if (!empty($changed) && ($changed <> $created)) {
    $delay = \Drupal::service('date.formatter')->formatInterval(time() - $changed, 1);
    $delay = t('@space- updated @delay ago', [
      '@delay' => $delay,
      '@space' => ' ',
    ]);
    if ($changed > strtotime('-1 hour')) {
      $delay = t('@space updated last hour', [
        '@space' => ' ',
      ]);
    }
    $label = t('updated');
    $delay_item = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => "text-muted last-$label",
      ],
      '#value' => $delay,
    ];
    $output[] = $delay_item;
    $variables['date'] = render($output);
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fut_content_form_node_fut_post_form_alter(&$form, $form_state) {
  // Ensure actions and advanced go to bottom of form.
  $form['advanced_expand'] = [
    '#type' => 'details',
    '#title' => t('More options'),
    '#weight' => 9998,
  ];
  $form['advanced_expand']['advanced'] = $form['advanced'];
  unset($form['advanced']);

  $form['actions']['#weight'] = 9999;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alter the IEF widget button labels.
 */
function fut_content_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (isset($element['#ief_id'])) {
    if (isset($element['actions'])) {
      foreach ($element['actions'] as $k => &$button) {
        if (strpos($k, 'ief_') === 0) {
          $old_string = str_replace(' media', '', $button['#value']->__toString());
          if ($element['#title'] == 'Post Image') {
            $element['#title'] = t("Image");
          }

          $old_string = ($old_string == 'Add existing')
            ? 'Use existing'
            : $old_string;

          $button['#value'] = t("@action @type_singular", ['@action' => $old_string, '@type_singular' => $element['#title']]);
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_multivalue_form_alter().
 */
function fut_content_field_widget_multivalue_form_alter(&$elements, $form_state, $context) {
  if ($context['widget']->getPluginId() == 'entity_reference_paragraphs') {
    foreach ($elements['add_more'] as &$button) {
      if (isset($button['#value'])) {
        $button['#value'] = t("@type", $button['#value']->getArguments());
      }
    }
  }
}

/**
 * Implements hook_paragraphs_widget_actions_alter().
 */
function fut_content_paragraphs_widget_actions_alter(array &$widget_actions, array &$context) {
  foreach ($widget_actions['actions'] as $widget_action_key => $widget_action) {
    array_unshift($widget_actions['dropdown_actions'], $widget_action);
    unset($widget_actions['actions'][$widget_action_key]);
  }
}

/**
 * Implements hook_entity_presave().
 */
function fut_content_entity_presave(EntityInterface $entity) {
  // Content should be unpublished if group is public and
  // user doesn't have a special role (editor, moderator, manager).
  // Might need some additional logic, like checking if a user has
  // reached a threshold of published content.
  switch ($entity->getEntityTypeId()) {
    case 'node':
      $emails = [];
      $entity_author = $entity->getOwner();
      $entity_author_id = $entity_author->id();
      if ($entity->id()) {
        $groups_content = GroupContent::loadByEntity($entity);
        if ($groups_content) {

          $created_by_special_member = FALSE;
          $group_content = array_shift($groups_content);
          $group = $group_content->getGroup();
          $special_members = $group->getMembers([
            'fut_open-editor',
            'fut_open-moderator',
            'fut_open-manager',
          ]);

          foreach ($special_members as $membership) {
            $user = $membership->getUser();
            $emails[] = $user->getEmail();
            if ($entity_author_id == $user->id()) {
              $created_by_special_member = TRUE;
            }
          }

          // If the post was unpublished, redirect to group,
          // warn the user, and notify moderators.
          if (!$created_by_special_member) {
            $entity->setPublished(FALSE);
            \Drupal::messenger()->addMessage(t('The content is awaiting review by a moderator.'), 'warning');

            $mailManager = \Drupal::service('plugin.manager.mail');
            $module = 'fut_content';
            $key = 'new_post_needs_moderation';
            $to = implode($emails, ', ');

            $params['subject'] = t("New post was created on @group", ['@group' => $group->label()]);
            $params['body'][] = t("@author has created a new @type in @group.", [
              '@group' => $group->label(),
              '@type' => $entity->type->entity->label(),
              '@author' => $entity_author->label(),
            ]);
            $params['body'][] = t("<a href='@url'>Click here to view the content</a>.", [
              '@url' => $entity->toUrl()->setAbsolute()->toString(),
            ]);

            $params['langcode'] = $langcode = \Drupal::currentUser()->getPreferredLangcode() ?? 'en';
            $mailManager->mail($module, $key, $to, $langcode, $params, NULL, TRUE);

            // Redirect to the group homepage.
            $response = new RedirectResponse($group->url());
            $response->send();

          }
        }
      }
      break;
  }
}

/**
 * Implements hook_mail().
 */
function fut_content_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_post_needs_moderation':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}
